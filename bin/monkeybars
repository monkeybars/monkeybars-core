#!/usr/bin/env jruby

require 'fileutils'
# require 'rubygems' ???
require 'monkeybars_version'

def help(message = nil)
  puts message + "\n-----------------------------------\n" unless message.nil?
  puts <<-ENDL
  Usage:
      monkeybars -h/--help
      monkeybars -v/--version
      
      monkeybars project_name
        Creates a new directory (project_name) containing a project skeleton with all files needed to run a monkeybars application.
  ENDL
end

if ARGV.empty?
  help
else
  rawr_install_args = ''
  project_name = ''

  until ARGV.empty?
    case ARGV.first
    when "-h" || "--help" || nil
      help
      exit
    when "-v" || "--version"
      puts "Monkeybars version #{Monkeybars::VERSION}\n"
      exit
    when /-RI(.+)/
      rawr_install_args << $1 + ' '
      ARGV.shift
    else
      # create new directory and copy app skeleton over
      project_name = ARGV[0]
      ARGV.shift
    end
  end
  
  if File.directory? project_name
    puts "Directory already exists, aborting\n"
  else
    begin
      puts "Creating directory #{project_name}\n"
      FileUtils.mkdir_p(project_name)
      # Need to cd into  project_name folder before invoking rawr since it uses the cwd to obtain
      # the project name in build_configuration.rb 
      # TODO: Bring back RakeFile once you can force Rawr to append the require 'rawr' statement via the command line
      # as opposed to its current interactive mode
     
      build_config_path = ''
      build_config      = ''

 FileUtils.cd(project_name) do
      warn "jruby -S rawr install #{rawr_install_args} "
      puts `jruby -version`
      puts `jruby -S rawr install #{rawr_install_args} `
      warn "Modify build_configuration  ..."
      build_config_path =  'build_configuration.rb'
      
      unless File.exist? build_config_path
        raise "Cannot locate '#{build_config_path}'!"
      end

      build_config = File.read build_config_path
      build_config.sub! /^end$/, <<-ENDL
  c.mac_icon_path = File.expand_path('icons/monkeybars.icns')
  c.windows_icon_path = File.expand_path('icons/monkeybars.ico')
end
ENDL
      File.open(build_config_path, 'w') {|f| f.puts build_config}
      
  end

      from = File.expand_path(File.join(File.dirname(__FILE__), '..', 'skeleton')) + '/.' # needs to be before the cd
  
      FileUtils.cd(project_name) do
        puts "Copying monkeybars project structure\n"
        FileUtils.cp_r(from , '.')
        File.open('Rakefile', 'a') do |f|
          f << <<-ENDL
Dir.glob("tasks/**/*.rake").each do |rake_file|
  load File.expand_path(File.dirname(__FILE__) + "/" + rake_file)
end
ENDL
        end

      puts "Installing swingset ..."
      warn `swingset`
      end
    rescue => e
      puts "Error installing Monkeybars project:"
      puts e
      puts e.backtrace
    end
  end
end
